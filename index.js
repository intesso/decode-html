// Store markers outside of the function scope,
// not to recreate them on every call
var entities = {
  'divide': '÷',
  'times': '×',
  'iquest': '¿',
  'frac34': '¾',
  'frac12': '½',
  'frac14': '¼',
  'raquo': '»',
  'ordm': 'º',
  'sup1': '¹',
  'cedil': '¸',
  'middot': '·',
  'para': '¶',
  'micro': 'µ',
  'acute': '´',
  'sup3': '³',
  'sup2': '²',
  'plusmn': '±',
  'deg': '°',
  'macr': '¯',
  'reg': '®',
  'shy': '',
  'not': '¬',
  'laquo': '«',
  'ordf': 'ª',
  'copy': '©',
  'uml': '¨',
  'sect': '§',
  'brvbar': '¦',
  'yen': '¥',
  'curren': '¤',
  'pound': '£',
  'cent': '¢',
  'iexcl': '¡',
  'nbsp': ' ',
  'yuml': 'ÿ',
  'thorn': 'þ',
  'yacute': 'ý',
  'uuml': 'ü',
  'ucirc': 'û',
  'uacute': 'ú',
  'ugrave': 'ù',
  'oslash': 'ø',
  'ouml': 'ö',
  'otilde': 'õ',
  'ocirc': 'ô',
  'oacute': 'ó',
  'ograve': 'ò',
  'ntilde': 'ñ',
  'eth': 'ð',
  'iuml': 'ï',
  'icirc': 'î',
  'iacute': 'í',
  'igrave': 'ì',
  'euml': 'ë',
  'ecirc': 'ê',
  'eacute': 'é',
  'egrave': 'è',
  'ccedil': 'ç',
  'aelig': 'æ',
  'aring': 'å',
  'auml': 'ä',
  'atilde': 'ã',
  'acirc': 'â',
  'aacute': 'á',
  'agrave': 'à',
  'szlig': 'ß',
  'THORN': 'Þ',
  'Yacute': 'Ý',
  'Uuml': 'Ü',
  'Ucirc': 'Û',
  'Uacute': 'Ú',
  'Ugrave': 'Ù',
  'Oslash': 'Ø',
  'Ouml': 'Ö',
  'Otilde': 'Õ',
  'Ocirc': 'Ô',
  'Oacute': 'Ó',
  'Ograve': 'Ò',
  'Ntilde': 'Ñ',
  'ETH': 'Ð',
  'Iuml': 'Ï',
  'Icirc': 'Î',
  'Iacute': 'Í',
  'Igrave': 'Ì',
  'Euml': 'Ë',
  'Ecirc': 'Ê',
  'Eacute': 'É',
  'Egrave': 'È',
  'Ccedil': 'Ç',
  'AElig': 'Æ',
  'Aring': 'Å',
  'Auml': 'Ä',
  'Atilde': 'Ã',
  'Acirc': 'Â',
  'Aacute': 'Á',
  'Agrave': 'À',
  'piv': 'ϖ',
  'upsih': 'ϒ',
  'thetasym': 'ϑ',
  'omega': 'ω',
  'psi': 'ψ',
  'chi': 'χ',
  'phi': 'φ',
  'upsilon': 'υ',
  'tau': 'τ',
  'sigma': 'σ',
  'sigmaf': 'ς',
  'rho': 'ρ',
  'pi': 'π',
  'omicron': 'ο',
  'xi': 'ξ',
  'nu': 'ν',
  'mu': 'μ',
  'lambda': 'λ',
  'kappa': 'κ',
  'iota': 'ι',
  'theta': 'θ',
  'eta': 'η',
  'zeta': 'ζ',
  'epsilon': 'ε',
  'delta': 'δ',
  'gamma': 'γ',
  'beta': 'β',
  'alpha': 'α',
  'Omega': 'Ω',
  'Psi': 'Ψ',
  'Chi': 'Χ',
  'Phi': 'Φ',
  'Upsilon': 'Υ',
  'Tau': 'Τ',
  'Sigma': 'Σ',
  'Rho': 'Ρ',
  'Pi': 'Π',
  'Omicron': 'Ο',
  'Xi': 'Ξ',
  'Nu': 'Ν',
  'Mu': 'Μ',
  'Lambda': 'Λ',
  'Kappa': 'Κ',
  'Iota': 'Ι',
  'Theta': 'Θ',
  'Eta': 'Η',
  'Zeta': 'Ζ',
  'Epsilon': 'Ε',
  'Delta': 'Δ',
  'Gamma': 'Γ',
  'Beta': 'Β',
  'Alpha': 'Α',
  'sdot': '⋅',
  'perp': '⊥',
  'otimes': '⊗',
  'oplus': '⊕',
  'supe': '⊇',
  'sube': '⊆',
  'nsub': '⊄',
  'sup': '⊃',
  'sub': '⊂',
  'ge': '≥',
  'le': '≤',
  'equiv': '≡',
  'ne': '≠',
  'asymp': '≈',
  'cong': '≅',
  'sim': '∼',
  'there4': '∴',
  'int': '∫',
  'cup': '∪',
  'cap': '∩',
  'or': '∨',
  'and': '∧',
  'ang': '∠',
  'infin': '∞',
  'prop': '∝',
  'radic': '√',
  'lowast': '∗',
  'minus': '−',
  'sum': '∑',
  'prod': '∏',
  'ni': '∋',
  'notin': '∉',
  'isin': '∈',
  'nabla': '∇',
  'empty': '∅',
  'exist': '∃',
  'part': '∂',
  'forall': '∀',
  'diams': '♦',
  'hearts': '♥',
  'clubs': '♣',
  'spades': '♠',
  'loz': '◊',
  'rfloor': '⌋',
  'lfloor': '⌊',
  'rceil': '⌉',
  'lceil': '⌈',
  'crarr': '↵',
  'harr': '↔',
  'darr': '↓',
  'rarr': '→',
  'uarr': '↑',
  'larr': '←',
  'trade': '™',
  'euro': '€',
  'oline': '‾',
  'rsaquo': '›',
  'lsaquo': '‹',
  'Prime': '″',
  'prime': '′',
  'permil': '‰',
  'hellip': '…',
  'bull': '•',
  'Dagger': '‡',
  'dagger': '†',
  'bdquo': '„',
  'rdquo': '”',
  'ldquo': '“',
  'sbquo': '‚',
  'rsquo': '’',
  'lsquo': '‘',
  'mdash': '—',
  'ndash': '–',
  'rlm': '‏',
  'lrm': '‎',
  'zwj': '‍',
  'zwnj': '‌',
  'thinsp': ' ',
  'emsp': ' ',
  'ensp': ' ',
  'tilde': '˜',
  'circ': 'ˆ',
  'fnof': 'ƒ',
  'Yuml': 'Ÿ',
  'scaron': 'š',
  'Scaron': 'Š',
  'oelig': 'œ',
  'OElig': 'Œ',
  'gt': '>',
  'lt': '<',
  'amp': '&',
  'apos': '\'',
  'quot': '"'
};
var entityPattern = /&([a-z]+);/ig;

module.exports = function decodeHTMLEntities(text) {
  // A single replace pass with a static RegExp is faster than a loop
  return text.replace(entityPattern, function(match, entity) {
    if (entities.hasOwnProperty(entity)) {
      return entities[entity];
    }
    // return original string if there is no matching entity (no replace)
    return match;
  });
};
